openModule /Nat/;
openModule /List/;

File.import "../core/core-load.iml";
File.import "../sugar/sugar-load.iml";
File.import "../util/util-load.iml";

File.loadWithoutDependencies "interface.isto";
File.loadWithoutDependencies "base.isto";
File.loadWithoutDependencies "inductive.isto";

openModule /Interface/;

beginModule "Construction";



lemma "monomial_stack_existence"
/
  forall (E : tp) (c k : nat) . exists (impl : stack_impl E k) . stack_correct E k (fn n . c * exp n k) impl
/;
intro /E c k/. induction /k/.
{
  exists /Base.base_impl E c/.
  rewrite /-> times_1_r/.
  exact /Base.base_case_correct E c/.
}
{
  intro /k (impl impl_correct)/.
  exists /Inductive.inductive_impl E k impl/.
  assert /(fn n . c * (n * exp n k)) = (fn n . n * (c * exp n k)) : (nat -> nat)/ /bound_eq/.
  {
    extensionality >> reintro /n/. reduce //.
    rewrite /<- times_assoc, -> times_commute c n, -> times_assoc/.
    reflexivity.
  }
  rewrite /-> bound_eq/.
  exact /Inductive.inductive_case_correct E k (fn n . c * exp n k) impl impl_correct/.
}
qed ();



endModule ();